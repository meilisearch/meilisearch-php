# This code-samples file is used by the Meilisearch documentation
# Every example written here will be automatically fetched by
# the documentation on build
# You can read more on https://github.com/meilisearch/documentation/tree/master/.vuepress/code-samples
---
get_one_index_1: |-
  $client->index('movies')->fetchRawInfo();
list_all_indexes_1: |-
  $client->getAllIndexes();
create_an_index_1: |-
  $client->createIndex('movies', ['primaryKey' => 'id']);
update_an_index_1: |-
  $client->updateIndex('movies', ['primaryKey' => 'id']);
  // OR
  $client->index('movies')->update(['primaryKey' => 'id']);
delete_an_index_1: |-
  $client->deleteIndex('movies');
  // OR
  $client->index('movies')->delete();
get_one_document_1: |-
  $client->index('movies')->getDocument(25684);
get_documents_1: |-
  $client->index('movies')->getDocuments(['limit' => 2]);
add_or_replace_documents_1: |-
  $client->index('movies')->addDocuments([
    [
      'id' => 287947,
      'title' => 'Shazam',
      'poster' => 'https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg',
      'overview' => 'A boy is given the ability to become an adult superhero in times of need with a single magic word.',
      'release_date' => '2019-03-23'
    ]
  ]);
add_or_update_documents_1: |-
  $client->index('movies')->updateDocuments([
    [
      'id' => 287947,
      'title' => 'Shazam ⚡️',
      'genres' => 'comedy'
    ]
  ]);
delete_all_documents_1: |-
  $client->index('movies')->deleteAllDocuments();
delete_one_document_1: |-
  $client->index('movies')->deleteDocument(25684);
delete_documents_1: |-
  $client->index('movies')->deleteDocuments([23488, 153738, 437035, 363869]);
search_post_1: |-
  // Do a search
  $searchResults = $client->index('movies')->search('american ninja');

  // Get results in an Array using a getter
  $hits = $searchResults->getHits();

  // Get the decoded response of Meilisearch, see response below
  $response = $searchResults->getRaw();
get_task_by_index_1: |-
  $client->index('movies')->getTask(1);
get_all_tasks_1: |-
  $client->getTasks();
get_task_1: |-
  $client->getTask(1);
get_all_tasks_by_index_1: |-
  $client->index('movies')->getTasks();
get_one_key_1: |-
  $client->getKey('d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4');
get_all_keys_1: |-
  $client->getKeys();
create_a_key_1: |-
  $client->createKey([
    'description' => 'Add documents: Products API key',
    'actions' => ['documents.add'],
    'indexes' => ['products'],
    'expiresAt' => '2042-04-02T00:42:42Z',
  ]);
update_a_key_1: |-
  $client->updateKey('d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4',
    [
      'description' => 'Manage documents: Products/Reviews API key',
      'actions' => ['documents.add', 'documents.delete'],
      'indexes' => ['products', 'reviews'],
      'expiresAt' => '2042-04-02T00:42:42Z',
    ]);
delete_a_key_1: |-
  $client->deleteKey('d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4')
get_settings_1: |-
  $client->index('movies')->getSettings();
update_settings_1: |-
  $client->index('movies')->updateSettings([
    'rankingRules' => [
      'words',
      'typo',
      'proximity',
      'attribute',
      'sort',
      'exactness',
      'release_date:desc',
      'rank:desc'
    ],
    'distinctAttribute' => 'movie_id',
    'searchableAttributes' => [
      'title',
      'overview',
      'genres'
    ],
    'displayedAttributes' => [
      'title',
      'overview',
      'genres',
      'release_date'
    ],
    'stopWords' => [
      'the',
      'a',
      'an'
    ],
    'sortableAttributes' => [
      'title',
      'release_date'
    ],
    'synonyms' => [
      'wolverine' => ['xmen', 'logan'],
      'logan' => ['wolverine']
    ],
    'typoTolerance' => [
        'minWordSizeForTypos' => [
          'oneTypo' => 8,
          'twoTypos' => 10
        ],
        'disableOnAttributes' => ['title']
    ]
  ]);
reset_settings_1: |-
  $client->index('movies')->resetSettings();
get_synonyms_1: |-
  $client->index('movies')->getSynonyms();
update_synonyms_1: |-
  $client->index('movies')->updateSynonyms([
    'wolverine' => ['xmen', 'logan'],
    'logan' => ['wolverine', 'xmen'],
    'wow' => ['world of warcraft']
  ]);
reset_synonyms_1: |-
  $client->index('movies')->resetSynonyms();
get_stop_words_1: |-
  $client->index('movies')->getStopWords();
update_stop_words_1: |-
  $client->index('movies')->updateStopWords(['the', 'of', 'to']);
reset_stop_words_1: |-
  $client->index('movies')->resetStopWords();
get_ranking_rules_1: |-
  $client->index('movies')->getRankingRules();
update_ranking_rules_1: |-
  $client->index('movies')->updateRankingRules([
    'words',
    'typo',
    'proximity',
    'attribute',
    'sort',
    'exactness',
    'release_date:asc',
    'rank:desc'
  ]);
reset_ranking_rules_1: |-
  $client->index('movies')->resetRankingRules();
get_distinct_attribute_1: |-
  $client->index('shoes')->getDistinctAttribute();
update_distinct_attribute_1: |-
  $client->index('shoes')->updateDistinctAttribute('skuid');
reset_distinct_attribute_1: |-
  $client->index('shoes')->resetDistinctAttribute();
get_filterable_attributes_1: |-
  $client->index('movies')->getFilterableAttributes();
update_filterable_attributes_1: |-
  $client->index('movies')->updateFilterableAttributes([
    'genres',
    'director'
  ]);
reset_filterable_attributes_1: |-
  $client->index('movies')->resetFilterableAttributes();
get_searchable_attributes_1: |-
  $client->index('movies')->getSearchableAttributes();
update_searchable_attributes_1: |-
  $client->index('movies')->updateSearchableAttributes([
    'title',
    'overview',
    'genres'
  ]);
reset_searchable_attributes_1: |-
  $client->index('movies')->resetSearchableAttributes();
get_displayed_attributes_1: |-
  $client->index('movies')->getDisplayedAttributes();
update_displayed_attributes_1: |-
  $client->index('movies')->updateDisplayedAttributes([
    'title',
    'overview',
    'genres',
    'release_date'
  ]);
reset_displayed_attributes_1: |-
  $client->index('movies')->resetDisplayedAttributes();
get_typo_tolerance_1:
  $client->index('books')->getTypoTolerance();
update_typo_tolerance_1: |-
  $client->index('books')->updateTypoTolerance([
    'minWordSizeForTypos' => [
        'oneTypo' => 4,
        'twoTypos' => 10
      ],
      'disableOnAttributes' => [
        'title'
    ]
  ]);
reset_typo_tolerance_1: |-
  $client->index('books')->resetTypoTolerance();
get_sortable_attributes_1: |-
  $client->index('books')->getSortableAttributes();
update_sortable_attributes_1: |-
  $client->index('books')->updateSortableAttributes([
    'price',
    'author'
  ]);
reset_sortable_attributes_1: |-
  $client->index('books')->resetSortableAttributes();
get_index_stats_1: |-
  $client->index('movies')->stats();
get_indexes_stats_1: |-
  $client->stats();
get_health_1: |-
  $client->health();
get_version_1: |-
  $client->version();
distinct_attribute_guide_1: |-
  $client->index('jackets')->updateDistinctAttribute('product_id');
field_properties_guide_searchable_1: |-
  $client->index('movies')->updateSearchableAttributes([
    'title',
    'overview',
    'genres'
  ]);
field_properties_guide_displayed_1: |-
  $client->index('movies')->updateDisplayedAttributes([
    'title',
    'overview',
    'genres',
    'release_date'
  ]);
filtering_guide_1: |-
  $client->index('movies')->search('Avengers', ['filter' => 'release_date > 795484800']);
filtering_guide_2: |-
  $client->index('movies')->search('Batman', ['filter' => 'release_date > 795484800 AND (director = "Tim Burton" OR director = "Christopher Nolan")']);
filtering_guide_3: |-
  $client->index('movies')->search('Planet of the Apes', ['filter' => 'rating >= 3 AND (NOT director = "Tim Burton")']);
search_parameter_guide_query_1: |-
  $client->index('movies')->search('shifu');
search_parameter_guide_offset_1: |-
  $client->index('movies')->search('shifu', ['offset' => 1]);
search_parameter_guide_limit_1: |-
  $client->index('movies')->search('shifu', ['limit' => 2]);
search_parameter_guide_retrieve_1: |-
  $client->index('movies')->search('shifu', ['attributesToRetrieve' => ['overview', 'title']]);
search_parameter_guide_crop_1: |-
  $client->index('movies')->search('shifu', ['attributesToCrop' => ['overview'], 'cropLength' => 5]);
search_parameter_guide_crop_marker_1: |-
  $client->index('movies')->search('shifu', ['attributesToCrop' => ['overview'], 'cropMarker' => '[…]']);
search_parameter_guide_highlight_1: |-
  $client->index('movies')->search('winter feast', ['attributesToHighlight' => ['overview']]);
search_parameter_guide_highlight_tag_1: |-
  $client->index('movies')->search('winter feast', [
    'attributesToHighlight' => ['overview'],
    'highlightPreTag' => '<span class="highlight">',
    'highlightPostTag' => '</span>'
  ]);
search_parameter_guide_matches_1: |-
  $client->index('movies')->search('winter feast', ['attributesToHighlight' => ['overview'], 'showMatchesPosition' => true]);
settings_guide_synonyms_1: |-
  $client->index('tops')->updateSettings([
    'synonyms' => [
      'sweater' => ['jumper'],
      'jumper' => ['sweater']
    ]
  ]);
settings_guide_stop_words_1: |-
  $client->index('movies')->updateSettings([
    'stopWords' => [
      'the',
      'a',
      'an'
    ],
  ]);
settings_guide_ranking_rules_1: |-
  $client->index('movies')->updateSettings([
    'rankingRules' => [
      'words',
      'typo',
      'proximity',
      'attribute',
      'sort',
      'exactness',
      'release_date:asc',
      'rank:desc'
    ]
  ]);
settings_guide_distinct_1: |-
  $client->index('jackets')->updateSettings([
    'distinctAttribute' => 'product_id'
  ]);
settings_guide_searchable_1: |-
  $client->index('movies')->updateSettings([
    'searchableAttributes' => [
      'title',
      'overview',
      'genres'
    ],
  ]);
settings_guide_displayed_1: |-
  $client->index('movies')->updateSettings([
    'displayedAttributes' => [
      'title',
      'overview',
      'genres',
      'release_date'
    ]
  ]);
settings_guide_sortable_1: |-
  $client->index('books')->updateSettings([
    'sortableAttributes' => [
      'price',
      'author'
    ]
  ]);
settings_guide_typo_tolerance_1: |-
  $client->index('movies')->updateTypoTolerance([
    'minWordSizeForTypos' => [
      'twoTypos' => 12
    ],
    'disableOnAttributes' => [
      'title'
    ]
  ]);
typo_tolerance_guide_1: |-
  $client->index('movies')->updateTypoTolerance([
    'enabled' => false
  ]);
typo_tolerance_guide_2: |-
  $client->index('movies')->updateTypoTolerance([
    'disableOnAttributes' => ['title']
  ]);
typo_tolerance_guide_3: |-
  $client->index('movies')->updateTypoTolerance([
    'disableOnWords' => ['shrek']
  ]);
typo_tolerance_guide_4: |-
  $client->index('movies')->updateTypoTolerance([
    'minWordSizeForTypos' => [
      'oneTypo' => 4,
      'twoTypos' => 10
    ]
  ]);
add_movies_json_1: |-
  $moviesJson = file_get_contents('movies.json');
  $movies = json_decode($moviesJson);

  $client->index('movies')->addDocuments($movies)
landing_getting_started_1: |-
  $client = new Client('http://127.0.0.1:7700', 'masterKey');

  $client->index('movies')->addDocuments([
    [ 'id' => 1, 'title' => 'Carol'],
    [ 'id' => 2, 'title' => 'Wonder Woman'],
    [ 'id' => 3, 'title' => 'Life of Pi'],
    [ 'id' => 4, 'title' => 'Mad Max: Fury Road'],
    [ 'id' => 5, 'title' => 'Moana'],
    [ 'id' => 6, 'title' => 'Philadelphia'],
  ]);
documents_guide_add_movie_1: |-
  $client->index('movies')->addDocuments([['movie_id' => '123sq178', 'title' => 'Amelie Poulain']]);
getting_started_add_documents_md: |-
  Using `meilisearch-php` with the Guzzle HTTP client:

  ```bash
  composer require meilisearch/meilisearch-php \
      guzzlehttp/guzzle \
      http-interop/http-factory-guzzle:^1.0
  ```

  ```php
  <?php

  require_once __DIR__ . '/vendor/autoload.php';

  use MeiliSearch\Client;

  $client = new Client('http://127.0.0.1:7700');

  $movies_json = file_get_contents('movies.json');
  $movies = json_decode($movies_json);

  $client->index('movies')->addDocuments($movies);
  ```

  [About this SDK](https://github.com/meilisearch/meilisearch-php/)
getting_started_check_task_status: |-
  $client->index('movies')->getTask(0);
getting_started_search_md: |-
  ```php
  $client->index('movies')->search('botman');
  ```

  [About this SDK](https://github.com/meilisearch/meilisearch-php/)
getting_started_add_meteorites: |-
  $client = new Client('http://127.0.0.1:7700');

  $meteorites_json = file_get_contents('meteorites.json');
  $meteorites = json_decode($meteorites_json);

  $client->index('meteorites')->addDocuments($meteorites);
getting_started_update_ranking_rules: |-
  $client->index('movies')->updateRankingRules([
    'exactness',
    'words',
    'typo',
    'proximity',
    'attribute',
    'sort',
    'release_date:asc',
    'rank:desc'
  ]);
getting_started_update_displayed_attributes: |-
  $client->index('movies')->updateDisplayedAttributes([
    'title',
    'overview',
    'poster'
  ]);
getting_started_update_searchable_attributes: |-
  $client->index('movies')->updateSearchableAttributes(['title']);
getting_started_update_stop_words: |-
  $client->index('movies')->updateStopWords(['the']);
getting_started_synonyms: |-
  $client->index('movies')->updateSynonyms([
    'winnie' => ['piglet'],
    'piglet' => ['winnie']
  ]);
getting_started_filtering: |-
  $client->index('meteorites')->search('', ['filter' => 'mass < 200']);
getting_started_geo_radius: |-
  $client->index('meteorites')->search('', ['filter' => '_geoRadius(46.9480, 7.4474, 210000)']);
getting_started_geo_point: |-
  $client->index('meteorites')->search('', ['sort' => ['_geoPoint(48.8583701,2.2922926):asc']]);
getting_started_sorting: |-
  $client->index('meteorites')->search('', ['filter' => 'mass < 200', 'sort' => ['mass:asc']]);
getting_started_configure_settings: |-
  $client->index('meteorites')->updateSettings([
    'filterableAttributes' => [
      'mass',
      '_geo'
    ],
    'sortableAttributes' => [
      'mass',
      '_geo'
    ]
  ]);
getting_started_communicating_with_a_protected_instance: |-
  $client = new Client('http://127.0.0.1:7700', 'apiKey');
  $client->index('movies')->search();
faceted_search_update_settings_1: |-
  $client->index('movies')->updateFilterableAttributes(['director', 'genres']);
faceted_search_filter_1: |-
  $client->index('movies')->search('thriller', ['filter' => [['genres = Horror', 'genres = Mystery'], 'director = "Jordan Peele"']]);
faceted_search_facets_distribution_1: |-
  $client->index('movies')->search('Batman', ['facets' => ['genres']]);
faceted_search_walkthrough_filter_1: |-
  $client->index('movies')->search('thriller', ['filter' => [['genres = Horror', 'genres = Mystery'], 'director = "Jordan Peele"']]);
post_dump_1: |-
  $client->createDump();
phrase_search_1: |-
  $client->index('movies')->search('"african american" horror');
sorting_guide_update_sortable_attributes_1: |-
  $client->index('books')->updateSortableAttributes([
    'author',
    'price'
  ]);
sorting_guide_update_ranking_rules_1: |-
  $client->index('books')->updateRankingRules([
    'words',
    'sort',
    'typo',
    'proximity',
    'attribute',
    'exactness'
  ]);
sorting_guide_sort_parameter_1: |-
  $client->index('books')->search('science fiction', ['sort' => ['price:asc']]);
sorting_guide_sort_parameter_2: |-
  $client->index('books')->search('butler', ['sort' => ['author:desc']]);
search_parameter_guide_sort_1: |-
  $client->index('books')->search('science fiction', ['sort' => ['price:asc']]);
geosearch_guide_filter_settings_1: |-
  $client->index('restaurants')->updateFilterableAttributes([
    '_geo'
  ]);
geosearch_guide_filter_usage_1: |-
  $client->index('restaurants')->search('', ['filter' => '_geoRadius(45.472735, 9.184019, 2000)']);
geosearch_guide_filter_usage_2: |-
  $client->index('restaurants')->search('', ['filter' => '_geoRadius(45.472735, 9.184019, 2000) AND type = pizza']);
geosearch_guide_sort_settings_1: |-
  $client->index('restaurants')->updateSortableAttributes([
    '_geo'
  ]);
geosearch_guide_sort_usage_1: |-
  $client->index('restaurants')->search('', ['sort' => ['_geoPoint(48.8561446,2.2978204):asc']]);
geosearch_guide_sort_usage_2: |-
  $client->index('restaurants')->search('', ['sort' => ['_geoPoint(48.8561446,2.2978204):asc', 'rating:desc']]);
primary_field_guide_create_index_primary_key: |-
  $client->createIndex('books', ['primaryKey' => 'reference_number']);
primary_field_guide_update_document_primary_key: |-
  $client->updateIndex('books', ['primaryKey' => 'title']);
primary_field_guide_add_document_primary_key: |-
  $client->index('books')->addDocuments([
    [
      'reference_number' => 287947,
      'title' => 'Diary of a Wimpy Kid',
      'author' => 'Jeff Kinney',
      'genres' => ['comedy', 'humor'],
      'price' => 5.00
    ]
  ], 'reference_number');
security_guide_search_key_1: |-
  $client = new Client('http://127.0.0.1:7700', 'masterKey');
  $client->index('patient_medical_records')->search();
security_guide_update_key_1: |-
  $client = new Client('http://127.0.0.1:7700', 'masterKey');
  $client->updateKey('d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4',
    ['indexes': ['doctors']]
  );
security_guide_create_key_1: |-
  $client = new Client('http://127.0.0.1:7700', 'masterKey');
  $client->createKey([
    'description' => 'Search patient records key',
    'actions' => ['search'],
    'indexes' => ['patient_medical_records'],
    'expiresAt' => '2023-01-01T00:00:00Z',
  ]);
security_guide_list_keys_1: |-
  $client = new Client('http://127.0.0.1:7700', 'masterKey');
  $client->getKeys();
security_guide_delete_key_1: |-
  $client = new Client('http://127.0.0.1:7700', 'masterKey');
  $client->deleteKey('d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4');
authorization_header_1: |-
  $client = new Client('http://127.0.0.1:7700', 'masterKey');
  $client->getKeys();
tenant_token_guide_generate_sdk_1: |-
  $searchRules = (object) [
    'patient_medical_records' => (object) [
      'filter' => 'user_id = 1',
    ]
  ];
  $options = [
      'apiKey' => 'B5KdX2MY2jV6EXfUs6scSfmC...',
      'expiresAt' => new DateTime('2025-12-20'),
  ];

  $token = $client->generateTenantToken($searchRules, $options);
tenant_token_guide_search_sdk_1: |-
  $frontEndClient = new Client('http://127.0.0.1:7700', $token);
  $frontEndClient->index('patient_medical_records')->search('blood test');
